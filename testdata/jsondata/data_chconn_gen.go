// Code generated by chgencolumn for marshaling/unmarshaling. DO NOT EDIT.

package jsondata

import (
	column "github.com/vahid-sohrabloo/chconn/v3/column"
	types "github.com/vahid-sohrabloo/chconn/v3/types"
	net "net"
)

// suppress unused package warning
var (
	_ types.Date32
)

type chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata struct {
	*column.Tuple
	ValueColumn  *column.StringBase[string]
	Value2Column *column.StringBase[string]
}

func (t SubStruct) ChColumns() column.TupleStruct[SubStruct] {
	return newchgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata()
}

func newchgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata() *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata {
	t := &chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata{}
	t.ValueColumn = column.NewStringBase[string]()
	t.ValueColumn.SetName([]byte("Value"))
	t.Value2Column = column.NewStringBase[string]()
	t.Value2Column.SetName([]byte("Value2"))
	t.Tuple = column.NewTuple(
		t.ValueColumn,
		t.Value2Column,
	)
	return t
}
func (t *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata) Append(data ...SubStruct) {
	for _, m := range data {
		t.ValueColumn.Append(m.Value)
		t.Value2Column.Append(m.Value2)
	}
}
func (t *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata) Array() *column.Array[SubStruct] {
	return column.NewArray[SubStruct](t)
}

func (t *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata) Nullable() *column.Nullable[SubStruct] {
	return column.NewNullable[SubStruct](t)
}

func (t *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata) Data() []SubStruct {
	val := make([]SubStruct, t.NumRow())
	for i := 0; i < t.NumRow(); i++ {
		val[i] = t.Row(i)
	}
	return val
}

func (t *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata) Read(value []SubStruct) []SubStruct {
	if cap(value)-len(value) >= t.NumRow() {
		value = value[:len(value)+t.NumRow()]
	} else {
		value = append(value, make([]SubStruct, t.NumRow())...)
	}

	val := value[len(value)-t.NumRow():]
	for i := 0; i < t.NumRow(); i++ {
		val[i] = t.Row(i)
	}
	return value
}

func (t *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata) Row(row int) SubStruct {
	return SubStruct{
		Value:  t.ValueColumn.Row(row),
		Value2: t.Value2Column.Row(row),
	}
}

type chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata1 struct {
	*column.Tuple
	VColumn *column.StringBase[string]
}

func (t SubP) ChColumns() column.TupleStruct[SubP] {
	return newchgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata1()
}

func newchgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata1() *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata1 {
	t := &chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata1{}
	t.VColumn = column.NewStringBase[string]()
	t.VColumn.SetName([]byte("V"))
	t.Tuple = column.NewTuple(
		t.VColumn,
	)
	return t
}
func (t *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata1) Append(data ...SubP) {
	for _, m := range data {
		t.VColumn.Append(m.V)
	}
}
func (t *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata1) Array() *column.Array[SubP] {
	return column.NewArray[SubP](t)
}

func (t *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata1) Nullable() *column.Nullable[SubP] {
	return column.NewNullable[SubP](t)
}

func (t *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata1) Data() []SubP {
	val := make([]SubP, t.NumRow())
	for i := 0; i < t.NumRow(); i++ {
		val[i] = t.Row(i)
	}
	return val
}

func (t *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata1) Read(value []SubP) []SubP {
	if cap(value)-len(value) >= t.NumRow() {
		value = value[:len(value)+t.NumRow()]
	} else {
		value = append(value, make([]SubP, t.NumRow())...)
	}

	val := value[len(value)-t.NumRow():]
	for i := 0; i < t.NumRow(); i++ {
		val[i] = t.Row(i)
	}
	return value
}

func (t *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata1) Row(row int) SubP {
	return SubP{
		V: t.VColumn.Row(row),
	}
}

type chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata2 struct {
	*column.Tuple
	Value2Column         *column.Base[int64]
	Sub1Column           column.Column[SubStruct]
	Sub2Column           *column.Nullable[SubStruct]
	SubNilColumn         *column.Nullable[SubStruct]
	SubSliceColumn       *column.Array[SubStruct]
	SubSliceNilColumn    *column.Array[SubStruct]
	SubPtrSliceColumn    *column.ArrayNullable[SubStruct]
	SubPtrSliceNilColumn *column.ArrayNullable[SubStruct]
	SubA1Column          column.Column[SubStructAlias]
	SubA2Column          *column.Nullable[SubStructAlias]
	SliceColumn          *column.Array[string]
}

func (t Structs) ChColumns() column.TupleStruct[Structs] {
	return newchgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata2()
}

func newchgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata2() *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata2 {
	t := &chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata2{}
	t.Value2Column = column.New[int64]()
	t.Value2Column.SetName([]byte("Value2"))
	var v1 SubStruct
	t.Sub1Column = v1.ChColumns()
	t.Sub1Column.SetName([]byte("substruct"))
	var v2 SubStruct
	t.Sub2Column = v2.ChColumns().Nullable()
	t.Sub2Column.SetName([]byte("Sub2"))
	var v3 SubStruct
	t.SubNilColumn = v3.ChColumns().Nullable()
	t.SubNilColumn.SetName([]byte("SubNil"))
	var v4 SubStruct
	t.SubSliceColumn = v4.ChColumns().Array()
	t.SubSliceColumn.SetName([]byte("SubSlice"))
	var v5 SubStruct
	t.SubSliceNilColumn = v5.ChColumns().Array()
	t.SubSliceNilColumn.SetName([]byte("SubSliceNil"))
	var v6 SubStruct
	t.SubPtrSliceColumn = v6.ChColumns().Nullable().Array()
	t.SubPtrSliceColumn.SetName([]byte("SubPtrSlice"))
	var v7 SubStruct
	t.SubPtrSliceNilColumn = v7.ChColumns().Nullable().Array()
	t.SubPtrSliceNilColumn.SetName([]byte("SubPtrSliceNil"))
	var v8 SubStructAlias
	t.SubA1Column = v8.ChColumns()
	t.SubA1Column.SetName([]byte("SubA1"))
	var v9 SubStructAlias
	t.SubA2Column = v9.ChColumns().Nullable()
	t.SubA2Column.SetName([]byte("SubA2"))
	t.SliceColumn = column.NewStringBase[string]().Array()
	t.SliceColumn.SetName([]byte("Slice"))
	t.Tuple = column.NewTuple(
		t.Value2Column,
		t.Sub1Column,
		t.Sub2Column,
		t.SubNilColumn,
		t.SubSliceColumn,
		t.SubSliceNilColumn,
		t.SubPtrSliceColumn,
		t.SubPtrSliceNilColumn,
		t.SubA1Column,
		t.SubA2Column,
		t.SliceColumn,
	)
	return t
}
func (t *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata2) Append(data ...Structs) {
	for _, m := range data {
		t.Value2Column.Append(int64(m.Value2))
		t.Sub1Column.Append(m.Sub1)
		t.Sub2Column.AppendP(m.Sub2)
		t.SubNilColumn.AppendP(m.SubNil)
		t.SubSliceColumn.Append(m.SubSlice)
		t.SubSliceNilColumn.Append(m.SubSliceNil)
		t.SubPtrSliceColumn.AppendP(m.SubPtrSlice)
		t.SubPtrSliceNilColumn.AppendP(m.SubPtrSliceNil)
		t.SubA1Column.Append(m.SubA1)
		t.SubA2Column.AppendP(m.SubA2)
		t.SliceColumn.Append(m.Slice)
	}
}
func (t *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata2) Array() *column.Array[Structs] {
	return column.NewArray[Structs](t)
}

func (t *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata2) Nullable() *column.Nullable[Structs] {
	return column.NewNullable[Structs](t)
}

func (t *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata2) Data() []Structs {
	val := make([]Structs, t.NumRow())
	for i := 0; i < t.NumRow(); i++ {
		val[i] = t.Row(i)
	}
	return val
}

func (t *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata2) Read(value []Structs) []Structs {
	if cap(value)-len(value) >= t.NumRow() {
		value = value[:len(value)+t.NumRow()]
	} else {
		value = append(value, make([]Structs, t.NumRow())...)
	}

	val := value[len(value)-t.NumRow():]
	for i := 0; i < t.NumRow(); i++ {
		val[i] = t.Row(i)
	}
	return value
}

func (t *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata2) Row(row int) Structs {
	return Structs{
		Value2:         int(t.Value2Column.Row(row)),
		Sub1:           t.Sub1Column.Row(row),
		Sub2:           t.Sub2Column.RowP(row),
		SubNil:         t.SubNilColumn.RowP(row),
		SubSlice:       t.SubSliceColumn.Row(row),
		SubSliceNil:    t.SubSliceNilColumn.Row(row),
		SubPtrSlice:    t.SubPtrSliceColumn.RowP(row),
		SubPtrSliceNil: t.SubPtrSliceNilColumn.RowP(row),
		SubA1:          t.SubA1Column.Row(row),
		SubA2:          t.SubA2Column.RowP(row),
		Slice:          t.SliceColumn.Row(row),
	}
}

type chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata3 struct {
	*column.Tuple
	ValueColumn  *column.StringBase[string]
	Value2Column *column.StringBase[string]
}

func (t SubStructAlias) ChColumns() column.TupleStruct[SubStructAlias] {
	return newchgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata3()
}

func newchgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata3() *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata3 {
	t := &chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata3{}
	t.ValueColumn = column.NewStringBase[string]()
	t.ValueColumn.SetName([]byte("Value"))
	t.Value2Column = column.NewStringBase[string]()
	t.Value2Column.SetName([]byte("Value2"))
	t.Tuple = column.NewTuple(
		t.ValueColumn,
		t.Value2Column,
	)
	return t
}
func (t *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata3) Append(data ...SubStructAlias) {
	for _, m := range data {
		t.ValueColumn.Append(m.Value)
		t.Value2Column.Append(m.Value2)
	}
}
func (t *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata3) Array() *column.Array[SubStructAlias] {
	return column.NewArray[SubStructAlias](t)
}

func (t *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata3) Nullable() *column.Nullable[SubStructAlias] {
	return column.NewNullable[SubStructAlias](t)
}

func (t *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata3) Data() []SubStructAlias {
	val := make([]SubStructAlias, t.NumRow())
	for i := 0; i < t.NumRow(); i++ {
		val[i] = t.Row(i)
	}
	return val
}

func (t *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata3) Read(value []SubStructAlias) []SubStructAlias {
	if cap(value)-len(value) >= t.NumRow() {
		value = value[:len(value)+t.NumRow()]
	} else {
		value = append(value, make([]SubStructAlias, t.NumRow())...)
	}

	val := value[len(value)-t.NumRow():]
	for i := 0; i < t.NumRow(); i++ {
		val[i] = t.Row(i)
	}
	return value
}

func (t *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata3) Row(row int) SubStructAlias {
	return SubStructAlias{
		Value:  t.ValueColumn.Row(row),
		Value2: t.Value2Column.Row(row),
	}
}

type chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata4 struct {
	*column.Tuple
	TColumn  *column.Date[types.DateTime64]
	IPColumn *column.Array[net.IP]
}

func (t StdMarshaler) ChColumns() column.TupleStruct[StdMarshaler] {
	return newchgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata4()
}

func newchgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata4() *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata4 {
	t := &chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata4{}
	t.TColumn = column.NewDate[types.DateTime64]().SetPrecision(3)
	t.TColumn.SetName([]byte("T"))
	t.IPColumn = column.NewStringMarshaler[net.IP]().Array()
	t.IPColumn.SetName([]byte("IP"))
	t.Tuple = column.NewTuple(
		t.TColumn,
		t.IPColumn,
	)
	return t
}
func (t *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata4) Append(data ...StdMarshaler) {
	for _, m := range data {
		t.TColumn.Append(m.T)
		t.IPColumn.Append(m.IP)
	}
}
func (t *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata4) Array() *column.Array[StdMarshaler] {
	return column.NewArray[StdMarshaler](t)
}

func (t *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata4) Nullable() *column.Nullable[StdMarshaler] {
	return column.NewNullable[StdMarshaler](t)
}

func (t *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata4) Data() []StdMarshaler {
	val := make([]StdMarshaler, t.NumRow())
	for i := 0; i < t.NumRow(); i++ {
		val[i] = t.Row(i)
	}
	return val
}

func (t *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata4) Read(value []StdMarshaler) []StdMarshaler {
	if cap(value)-len(value) >= t.NumRow() {
		value = value[:len(value)+t.NumRow()]
	} else {
		value = append(value, make([]StdMarshaler, t.NumRow())...)
	}

	val := value[len(value)-t.NumRow():]
	for i := 0; i < t.NumRow(); i++ {
		val[i] = t.Row(i)
	}
	return value
}

func (t *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata4) Row(row int) StdMarshaler {
	return StdMarshaler{
		T:  t.TColumn.Row(row),
		IP: t.IPColumn.Row(row),
	}
}

type chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata5 struct {
	*column.Tuple
	StringColumn        *column.StringBase[string]
	BoolColumn          *column.Base[bool]
	IntColumn           *column.Base[int64]
	Int8Column          *column.Base[int8]
	Int16Column         *column.Base[int16]
	Int32Column         *column.Base[int32]
	Int64Column         *column.Base[int64]
	UintColumn          *column.Base[uint]
	Uint8Column         *column.Base[uint8]
	Uint16Column        *column.Base[uint16]
	Uint32Column        *column.Base[uint32]
	Uint64Column        *column.Base[uint64]
	IntStringColumn     *column.Base[int64]
	Int8StringColumn    *column.Base[int8]
	Int16StringColumn   *column.Base[int16]
	Int32StringColumn   *column.Base[int32]
	Int64StringColumn   *column.Base[int64]
	UintStringColumn    *column.Base[uint]
	Uint8StringColumn   *column.Base[uint8]
	Uint16StringColumn  *column.Base[uint16]
	Uint32StringColumn  *column.Base[uint32]
	Uint64StringColumn  *column.Base[uint64]
	Float32Column       *column.Base[float32]
	Float64Column       *column.Base[float64]
	Float32StringColumn *column.Base[float32]
	Float64StringColumn *column.Base[float64]
	PtrColumn           *column.Nullable[string]
	PtrNilColumn        *column.Nullable[string]
}

func (t PrimitiveTypes) ChColumns() column.TupleStruct[PrimitiveTypes] {
	return newchgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata5()
}

func newchgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata5() *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata5 {
	t := &chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata5{}
	t.StringColumn = column.NewStringBase[string]()
	t.StringColumn.SetName([]byte("String"))
	t.BoolColumn = column.New[bool]()
	t.BoolColumn.SetName([]byte("Bool"))
	t.IntColumn = column.New[int64]()
	t.IntColumn.SetName([]byte("Int"))
	t.Int8Column = column.New[int8]()
	t.Int8Column.SetName([]byte("Int8"))
	t.Int16Column = column.New[int16]()
	t.Int16Column.SetName([]byte("Int16"))
	t.Int32Column = column.New[int32]()
	t.Int32Column.SetName([]byte("Int32"))
	t.Int64Column = column.New[int64]()
	t.Int64Column.SetName([]byte("Int64"))
	t.UintColumn = column.New[uint]()
	t.UintColumn.SetName([]byte("Uint"))
	t.Uint8Column = column.New[uint8]()
	t.Uint8Column.SetName([]byte("Uint8"))
	t.Uint16Column = column.New[uint16]()
	t.Uint16Column.SetName([]byte("Uint16"))
	t.Uint32Column = column.New[uint32]()
	t.Uint32Column.SetName([]byte("Uint32"))
	t.Uint64Column = column.New[uint64]()
	t.Uint64Column.SetName([]byte("Uint64"))
	t.IntStringColumn = column.New[int64]()
	t.IntStringColumn.SetName([]byte("IntString"))
	t.Int8StringColumn = column.New[int8]()
	t.Int8StringColumn.SetName([]byte("Int8String"))
	t.Int16StringColumn = column.New[int16]()
	t.Int16StringColumn.SetName([]byte("Int16String"))
	t.Int32StringColumn = column.New[int32]()
	t.Int32StringColumn.SetName([]byte("Int32String"))
	t.Int64StringColumn = column.New[int64]()
	t.Int64StringColumn.SetName([]byte("Int64String"))
	t.UintStringColumn = column.New[uint]()
	t.UintStringColumn.SetName([]byte("UintString"))
	t.Uint8StringColumn = column.New[uint8]()
	t.Uint8StringColumn.SetName([]byte("Uint8String"))
	t.Uint16StringColumn = column.New[uint16]()
	t.Uint16StringColumn.SetName([]byte("Uint16String"))
	t.Uint32StringColumn = column.New[uint32]()
	t.Uint32StringColumn.SetName([]byte("Uint32String"))
	t.Uint64StringColumn = column.New[uint64]()
	t.Uint64StringColumn.SetName([]byte("Uint64String"))
	t.Float32Column = column.New[float32]()
	t.Float32Column.SetName([]byte("Float32"))
	t.Float64Column = column.New[float64]()
	t.Float64Column.SetName([]byte("Float64"))
	t.Float32StringColumn = column.New[float32]()
	t.Float32StringColumn.SetName([]byte("Float32String"))
	t.Float64StringColumn = column.New[float64]()
	t.Float64StringColumn.SetName([]byte("Float64String"))
	t.PtrColumn = column.NewStringBase[string]().Nullable()
	t.PtrColumn.SetName([]byte("Ptr"))
	t.PtrNilColumn = column.NewStringBase[string]().Nullable()
	t.PtrNilColumn.SetName([]byte("PtrNil"))
	t.Tuple = column.NewTuple(
		t.StringColumn,
		t.BoolColumn,
		t.IntColumn,
		t.Int8Column,
		t.Int16Column,
		t.Int32Column,
		t.Int64Column,
		t.UintColumn,
		t.Uint8Column,
		t.Uint16Column,
		t.Uint32Column,
		t.Uint64Column,
		t.IntStringColumn,
		t.Int8StringColumn,
		t.Int16StringColumn,
		t.Int32StringColumn,
		t.Int64StringColumn,
		t.UintStringColumn,
		t.Uint8StringColumn,
		t.Uint16StringColumn,
		t.Uint32StringColumn,
		t.Uint64StringColumn,
		t.Float32Column,
		t.Float64Column,
		t.Float32StringColumn,
		t.Float64StringColumn,
		t.PtrColumn,
		t.PtrNilColumn,
	)
	return t
}
func (t *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata5) Append(data ...PrimitiveTypes) {
	for _, m := range data {
		t.StringColumn.Append(m.String)
		t.BoolColumn.Append(m.Bool)
		t.IntColumn.Append(int64(m.Int))
		t.Int8Column.Append(m.Int8)
		t.Int16Column.Append(m.Int16)
		t.Int32Column.Append(m.Int32)
		t.Int64Column.Append(m.Int64)
		t.UintColumn.Append(m.Uint)
		t.Uint8Column.Append(m.Uint8)
		t.Uint16Column.Append(m.Uint16)
		t.Uint32Column.Append(m.Uint32)
		t.Uint64Column.Append(m.Uint64)
		t.IntStringColumn.Append(int64(m.IntString))
		t.Int8StringColumn.Append(m.Int8String)
		t.Int16StringColumn.Append(m.Int16String)
		t.Int32StringColumn.Append(m.Int32String)
		t.Int64StringColumn.Append(m.Int64String)
		t.UintStringColumn.Append(m.UintString)
		t.Uint8StringColumn.Append(m.Uint8String)
		t.Uint16StringColumn.Append(m.Uint16String)
		t.Uint32StringColumn.Append(m.Uint32String)
		t.Uint64StringColumn.Append(m.Uint64String)
		t.Float32Column.Append(m.Float32)
		t.Float64Column.Append(m.Float64)
		t.Float32StringColumn.Append(m.Float32String)
		t.Float64StringColumn.Append(m.Float64String)
		t.PtrColumn.AppendP(m.Ptr)
		t.PtrNilColumn.AppendP(m.PtrNil)
	}
}
func (t *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata5) Array() *column.Array[PrimitiveTypes] {
	return column.NewArray[PrimitiveTypes](t)
}

func (t *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata5) Nullable() *column.Nullable[PrimitiveTypes] {
	return column.NewNullable[PrimitiveTypes](t)
}

func (t *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata5) Data() []PrimitiveTypes {
	val := make([]PrimitiveTypes, t.NumRow())
	for i := 0; i < t.NumRow(); i++ {
		val[i] = t.Row(i)
	}
	return val
}

func (t *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata5) Read(value []PrimitiveTypes) []PrimitiveTypes {
	if cap(value)-len(value) >= t.NumRow() {
		value = value[:len(value)+t.NumRow()]
	} else {
		value = append(value, make([]PrimitiveTypes, t.NumRow())...)
	}

	val := value[len(value)-t.NumRow():]
	for i := 0; i < t.NumRow(); i++ {
		val[i] = t.Row(i)
	}
	return value
}

func (t *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata5) Row(row int) PrimitiveTypes {
	return PrimitiveTypes{
		String:        t.StringColumn.Row(row),
		Bool:          t.BoolColumn.Row(row),
		Int:           int(t.IntColumn.Row(row)),
		Int8:          t.Int8Column.Row(row),
		Int16:         t.Int16Column.Row(row),
		Int32:         t.Int32Column.Row(row),
		Int64:         t.Int64Column.Row(row),
		Uint:          t.UintColumn.Row(row),
		Uint8:         t.Uint8Column.Row(row),
		Uint16:        t.Uint16Column.Row(row),
		Uint32:        t.Uint32Column.Row(row),
		Uint64:        t.Uint64Column.Row(row),
		IntString:     int(t.IntStringColumn.Row(row)),
		Int8String:    t.Int8StringColumn.Row(row),
		Int16String:   t.Int16StringColumn.Row(row),
		Int32String:   t.Int32StringColumn.Row(row),
		Int64String:   t.Int64StringColumn.Row(row),
		UintString:    t.UintStringColumn.Row(row),
		Uint8String:   t.Uint8StringColumn.Row(row),
		Uint16String:  t.Uint16StringColumn.Row(row),
		Uint32String:  t.Uint32StringColumn.Row(row),
		Uint64String:  t.Uint64StringColumn.Row(row),
		Float32:       t.Float32Column.Row(row),
		Float64:       t.Float64Column.Row(row),
		Float32String: t.Float32StringColumn.Row(row),
		Float64String: t.Float64StringColumn.Row(row),
		Ptr:           t.PtrColumn.RowP(row),
		PtrNil:        t.PtrNilColumn.RowP(row),
	}
}

type chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata6 struct {
	*column.Tuple
	StringColumn  *column.StringBase[NamedString]
	BoolColumn    *column.Base[NamedBool]
	IntColumn     *column.Base[int64]
	Int8Column    *column.Base[NamedInt8]
	Int16Column   *column.Base[NamedInt16]
	Int32Column   *column.Base[NamedInt32]
	Int64Column   *column.Base[NamedInt64]
	UintColumn    *column.Base[NamedUint]
	Uint8Column   *column.Base[NamedUint8]
	Uint16Column  *column.Base[NamedUint16]
	Uint32Column  *column.Base[NamedUint32]
	Uint64Column  *column.Base[NamedUint64]
	Float32Column *column.Base[NamedFloat32]
	Float64Column *column.Base[NamedFloat64]
	PtrColumn     *column.Nullable[string]
	PtrNilColumn  *column.Nullable[string]
}

func (t NamedPrimitiveTypes) ChColumns() column.TupleStruct[NamedPrimitiveTypes] {
	return newchgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata6()
}

func newchgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata6() *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata6 {
	t := &chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata6{}
	t.StringColumn = column.NewStringBase[NamedString]()
	t.StringColumn.SetName([]byte("String"))
	t.BoolColumn = column.New[NamedBool]()
	t.BoolColumn.SetName([]byte("Bool"))
	t.IntColumn = column.New[int64]()
	t.IntColumn.SetName([]byte("Int"))
	t.Int8Column = column.New[NamedInt8]()
	t.Int8Column.SetName([]byte("Int8"))
	t.Int16Column = column.New[NamedInt16]()
	t.Int16Column.SetName([]byte("Int16"))
	t.Int32Column = column.New[NamedInt32]()
	t.Int32Column.SetName([]byte("Int32"))
	t.Int64Column = column.New[NamedInt64]()
	t.Int64Column.SetName([]byte("Int64"))
	t.UintColumn = column.New[NamedUint]()
	t.UintColumn.SetName([]byte("Uint"))
	t.Uint8Column = column.New[NamedUint8]()
	t.Uint8Column.SetName([]byte("Uint8"))
	t.Uint16Column = column.New[NamedUint16]()
	t.Uint16Column.SetName([]byte("Uint16"))
	t.Uint32Column = column.New[NamedUint32]()
	t.Uint32Column.SetName([]byte("Uint32"))
	t.Uint64Column = column.New[NamedUint64]()
	t.Uint64Column.SetName([]byte("Uint64"))
	t.Float32Column = column.New[NamedFloat32]()
	t.Float32Column.SetName([]byte("Float32"))
	t.Float64Column = column.New[NamedFloat64]()
	t.Float64Column.SetName([]byte("Float64"))
	t.PtrColumn = column.NewStringBase[string]().Nullable()
	t.PtrColumn.SetName([]byte("Ptr"))
	t.PtrNilColumn = column.NewStringBase[string]().Nullable()
	t.PtrNilColumn.SetName([]byte("PtrNil"))
	t.Tuple = column.NewTuple(
		t.StringColumn,
		t.BoolColumn,
		t.IntColumn,
		t.Int8Column,
		t.Int16Column,
		t.Int32Column,
		t.Int64Column,
		t.UintColumn,
		t.Uint8Column,
		t.Uint16Column,
		t.Uint32Column,
		t.Uint64Column,
		t.Float32Column,
		t.Float64Column,
		t.PtrColumn,
		t.PtrNilColumn,
	)
	return t
}
func (t *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata6) Append(data ...NamedPrimitiveTypes) {
	for _, m := range data {
		t.StringColumn.Append(m.String)
		t.BoolColumn.Append(m.Bool)
		t.IntColumn.Append(int64(m.Int))
		t.Int8Column.Append(m.Int8)
		t.Int16Column.Append(m.Int16)
		t.Int32Column.Append(m.Int32)
		t.Int64Column.Append(m.Int64)
		t.UintColumn.Append(m.Uint)
		t.Uint8Column.Append(m.Uint8)
		t.Uint16Column.Append(m.Uint16)
		t.Uint32Column.Append(m.Uint32)
		t.Uint64Column.Append(m.Uint64)
		t.Float32Column.Append(m.Float32)
		t.Float64Column.Append(m.Float64)
		t.PtrColumn.AppendP(m.Ptr)
		t.PtrNilColumn.AppendP(m.PtrNil)
	}
}
func (t *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata6) Array() *column.Array[NamedPrimitiveTypes] {
	return column.NewArray[NamedPrimitiveTypes](t)
}

func (t *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata6) Nullable() *column.Nullable[NamedPrimitiveTypes] {
	return column.NewNullable[NamedPrimitiveTypes](t)
}

func (t *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata6) Data() []NamedPrimitiveTypes {
	val := make([]NamedPrimitiveTypes, t.NumRow())
	for i := 0; i < t.NumRow(); i++ {
		val[i] = t.Row(i)
	}
	return val
}

func (t *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata6) Read(value []NamedPrimitiveTypes) []NamedPrimitiveTypes {
	if cap(value)-len(value) >= t.NumRow() {
		value = value[:len(value)+t.NumRow()]
	} else {
		value = append(value, make([]NamedPrimitiveTypes, t.NumRow())...)
	}

	val := value[len(value)-t.NumRow():]
	for i := 0; i < t.NumRow(); i++ {
		val[i] = t.Row(i)
	}
	return value
}

func (t *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata6) Row(row int) NamedPrimitiveTypes {
	return NamedPrimitiveTypes{
		String:  t.StringColumn.Row(row),
		Bool:    t.BoolColumn.Row(row),
		Int:     NamedInt(t.IntColumn.Row(row)),
		Int8:    t.Int8Column.Row(row),
		Int16:   t.Int16Column.Row(row),
		Int32:   t.Int32Column.Row(row),
		Int64:   t.Int64Column.Row(row),
		Uint:    t.UintColumn.Row(row),
		Uint8:   t.Uint8Column.Row(row),
		Uint16:  t.Uint16Column.Row(row),
		Uint32:  t.Uint32Column.Row(row),
		Uint64:  t.Uint64Column.Row(row),
		Float32: t.Float32Column.Row(row),
		Float64: t.Float64Column.Row(row),
		Ptr:     t.PtrColumn.RowP(row),
		PtrNil:  t.PtrNilColumn.RowP(row),
	}
}

type chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata7 struct {
	*column.Tuple
	MapColumn          *column.Map[string, string]
	InterfaceMapColumn *column.Map[string, int64]
	NilMapColumn       *column.Map[string, string]
	ArrayMapColumn     *column.Map[string, Arrays]
	CustomMapColumn    *column.Map[Str, Str]
}

func (t Maps) ChColumns() column.TupleStruct[Maps] {
	return newchgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata7()
}

func newchgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata7() *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata7 {
	t := &chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata7{}
	var v10 = column.NewStringBase[string]()
	var v11 = column.NewStringBase[string]()
	t.MapColumn = column.NewMap[string, string](v10, v11)
	t.MapColumn.SetName([]byte("Map"))
	var v12 = column.NewStringBase[string]()
	var v13 = column.New[int64]()
	t.InterfaceMapColumn = column.NewMap[string, int64](v12, v13)
	t.InterfaceMapColumn.SetName([]byte("InterfaceMap"))
	var v14 = column.NewStringBase[string]()
	var v15 = column.NewStringBase[string]()
	t.NilMapColumn = column.NewMap[string, string](v14, v15)
	t.NilMapColumn.SetName([]byte("NilMap"))
	var v16 = column.NewStringBase[string]()
	var v18 Arrays
	var v17 = v18.ChColumns()
	t.ArrayMapColumn = column.NewMap[string, Arrays](v16, v17)
	t.ArrayMapColumn.SetName([]byte("ArrayMap"))
	var v19 = column.NewStringBase[Str]()
	var v20 = column.NewStringBase[Str]()
	t.CustomMapColumn = column.NewMap[Str, Str](v19, v20)
	t.CustomMapColumn.SetName([]byte("CustomMap"))
	t.Tuple = column.NewTuple(
		t.MapColumn,
		t.InterfaceMapColumn,
		t.NilMapColumn,
		t.ArrayMapColumn,
		t.CustomMapColumn,
	)
	return t
}
func (t *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata7) Append(data ...Maps) {
	for _, m := range data {
		t.MapColumn.Append(m.Map)
		t.InterfaceMapColumn.Append(m.InterfaceMap)
		t.NilMapColumn.Append(m.NilMap)
		t.ArrayMapColumn.Append(m.ArrayMap)
		t.CustomMapColumn.Append(m.CustomMap)
	}
}
func (t *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata7) Array() *column.Array[Maps] {
	return column.NewArray[Maps](t)
}

func (t *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata7) Nullable() *column.Nullable[Maps] {
	return column.NewNullable[Maps](t)
}

func (t *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata7) Data() []Maps {
	val := make([]Maps, t.NumRow())
	for i := 0; i < t.NumRow(); i++ {
		val[i] = t.Row(i)
	}
	return val
}

func (t *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata7) Read(value []Maps) []Maps {
	if cap(value)-len(value) >= t.NumRow() {
		value = value[:len(value)+t.NumRow()]
	} else {
		value = append(value, make([]Maps, t.NumRow())...)
	}

	val := value[len(value)-t.NumRow():]
	for i := 0; i < t.NumRow(); i++ {
		val[i] = t.Row(i)
	}
	return value
}

func (t *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata7) Row(row int) Maps {
	return Maps{
		Map:          t.MapColumn.Row(row),
		InterfaceMap: t.InterfaceMapColumn.Row(row),
		NilMap:       t.NilMapColumn.Row(row),
		ArrayMap:     t.ArrayMapColumn.Row(row),
		CustomMap:    t.CustomMapColumn.Row(row),
	}
}

type chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata8 struct {
	*column.Tuple
	ProcessColumn *column.Base[bool]
}

func (t ExcludedField) ChColumns() column.TupleStruct[ExcludedField] {
	return newchgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata8()
}

func newchgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata8() *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata8 {
	t := &chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata8{}
	t.ProcessColumn = column.New[bool]()
	t.ProcessColumn.SetName([]byte("process"))
	t.Tuple = column.NewTuple(
		t.ProcessColumn,
	)
	return t
}
func (t *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata8) Append(data ...ExcludedField) {
	for _, m := range data {
		t.ProcessColumn.Append(m.Process)
	}
}
func (t *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata8) Array() *column.Array[ExcludedField] {
	return column.NewArray[ExcludedField](t)
}

func (t *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata8) Nullable() *column.Nullable[ExcludedField] {
	return column.NewNullable[ExcludedField](t)
}

func (t *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata8) Data() []ExcludedField {
	val := make([]ExcludedField, t.NumRow())
	for i := 0; i < t.NumRow(); i++ {
		val[i] = t.Row(i)
	}
	return val
}

func (t *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata8) Read(value []ExcludedField) []ExcludedField {
	if cap(value)-len(value) >= t.NumRow() {
		value = value[:len(value)+t.NumRow()]
	} else {
		value = append(value, make([]ExcludedField, t.NumRow())...)
	}

	val := value[len(value)-t.NumRow():]
	for i := 0; i < t.NumRow(); i++ {
		val[i] = t.Row(i)
	}
	return value
}

func (t *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata8) Row(row int) ExcludedField {
	return ExcludedField{
		Process: t.ProcessColumn.Row(row),
	}
}

type chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata9 struct {
	*column.Tuple
	SliceMapColumn         *column.Map[Str, []Str]
	SliceMap1Column        *column.Map[Str, []Str]
	SliceMap2Column        *column.Map[Str, []Str]
	MapSliceColumn         *column.Array[map[Str]Str]
	NamedStringSliceColumn *column.Array[NamedString]
}

func (t DeepNest) ChColumns() column.TupleStruct[DeepNest] {
	return newchgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata9()
}

func newchgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata9() *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata9 {
	t := &chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata9{}
	var v21 = column.NewStringBase[Str]()
	var v22 = column.NewStringBase[Str]().Array()
	t.SliceMapColumn = column.NewMap[Str, []Str](v21, v22)
	t.SliceMapColumn.SetName([]byte("SliceMap"))
	var v23 = column.NewStringBase[Str]()
	var v24 = column.NewStringBase[Str]().Array()
	t.SliceMap1Column = column.NewMap[Str, []Str](v23, v24)
	t.SliceMap1Column.SetName([]byte("SliceMap1"))
	var v25 = column.NewStringBase[Str]()
	var v26 = column.NewStringBase[Str]().Array()
	t.SliceMap2Column = column.NewMap[Str, []Str](v25, v26)
	t.SliceMap2Column.SetName([]byte("SliceMap2"))
	var v27 = column.NewStringBase[Str]()
	var v28 = column.NewStringBase[Str]()
	t.MapSliceColumn = column.NewMap[Str, Str](v27, v28).Array()
	t.MapSliceColumn.SetName([]byte("MapSlice"))
	t.NamedStringSliceColumn = column.NewStringBase[NamedString]().Array()
	t.NamedStringSliceColumn.SetName([]byte("NamedStringSlice"))
	t.Tuple = column.NewTuple(
		t.SliceMapColumn,
		t.SliceMap1Column,
		t.SliceMap2Column,
		t.MapSliceColumn,
		t.NamedStringSliceColumn,
	)
	return t
}
func (t *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata9) Append(data ...DeepNest) {
	for _, m := range data {
		t.SliceMapColumn.Append(m.SliceMap)
		t.SliceMap1Column.Append(m.SliceMap1)
		t.SliceMap2Column.Append(m.SliceMap2)
		t.MapSliceColumn.Append(m.MapSlice)
		t.NamedStringSliceColumn.Append(m.NamedStringSlice)
	}
}
func (t *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata9) Array() *column.Array[DeepNest] {
	return column.NewArray[DeepNest](t)
}

func (t *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata9) Nullable() *column.Nullable[DeepNest] {
	return column.NewNullable[DeepNest](t)
}

func (t *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata9) Data() []DeepNest {
	val := make([]DeepNest, t.NumRow())
	for i := 0; i < t.NumRow(); i++ {
		val[i] = t.Row(i)
	}
	return val
}

func (t *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata9) Read(value []DeepNest) []DeepNest {
	if cap(value)-len(value) >= t.NumRow() {
		value = value[:len(value)+t.NumRow()]
	} else {
		value = append(value, make([]DeepNest, t.NumRow())...)
	}

	val := value[len(value)-t.NumRow():]
	for i := 0; i < t.NumRow(); i++ {
		val[i] = t.Row(i)
	}
	return value
}

func (t *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata9) Row(row int) DeepNest {
	return DeepNest{
		SliceMap:         t.SliceMapColumn.Row(row),
		SliceMap1:        t.SliceMap1Column.Row(row),
		SliceMap2:        t.SliceMap2Column.Row(row),
		MapSlice:         t.MapSliceColumn.Row(row),
		NamedStringSlice: t.NamedStringSliceColumn.Row(row),
	}
}

type chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata10 struct {
	*column.Tuple
	FixedStringColumn      *column.Base[[3]byte]
	FixedStringArrayColumn *column.Array[[3]byte]
}

func (t Arrays) ChColumns() column.TupleStruct[Arrays] {
	return newchgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata10()
}

func newchgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata10() *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata10 {
	t := &chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata10{}
	t.FixedStringColumn = column.New[[3]byte]()
	t.FixedStringColumn.SetName([]byte("FixedString"))
	t.FixedStringArrayColumn = column.New[[3]byte]().Array()
	t.FixedStringArrayColumn.SetName([]byte("FixedStringArray"))
	t.Tuple = column.NewTuple(
		t.FixedStringColumn,
		t.FixedStringArrayColumn,
	)
	return t
}
func (t *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata10) Append(data ...Arrays) {
	for _, m := range data {
		t.FixedStringColumn.Append(m.FixedString)
		t.FixedStringArrayColumn.Append(m.FixedStringArray)
	}
}
func (t *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata10) Array() *column.Array[Arrays] {
	return column.NewArray[Arrays](t)
}

func (t *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata10) Nullable() *column.Nullable[Arrays] {
	return column.NewNullable[Arrays](t)
}

func (t *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata10) Data() []Arrays {
	val := make([]Arrays, t.NumRow())
	for i := 0; i < t.NumRow(); i++ {
		val[i] = t.Row(i)
	}
	return val
}

func (t *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata10) Read(value []Arrays) []Arrays {
	if cap(value)-len(value) >= t.NumRow() {
		value = value[:len(value)+t.NumRow()]
	} else {
		value = append(value, make([]Arrays, t.NumRow())...)
	}

	val := value[len(value)-t.NumRow():]
	for i := 0; i < t.NumRow(); i++ {
		val[i] = t.Row(i)
	}
	return value
}

func (t *chgogenAbff6de4ChgogenGithubComVahidSohrablooChconnV2TestdataJsondata10) Row(row int) Arrays {
	return Arrays{
		FixedString:      t.FixedStringColumn.Row(row),
		FixedStringArray: t.FixedStringArrayColumn.Row(row),
	}
}
